upstream puma {
  server unix:<%= shared_path %>/tmp/sockets/puma.sock;
}

<% if fetch(:force_www_url) %>
server {
  listen 80;
  <% if fetch(:ssl_certificate_path) && fetch(:ssl_key_path) %>
  listen               443 ssl;
  ssl_certificate      <%= fetch(:ssl_certificate_path) %>;
  ssl_certificate_key  <%= fetch(:ssl_key_path) %>;
  <% elsif fetch(:ssl_certificate_filename) %>
  listen               443 ssl;
  ssl_certificate      /etc/ssl/certs/<%= fetch(:ssl_certificate_filename) %>.pem;
  ssl_certificate_key  /etc/ssl/private/<%= fetch(:ssl_certificate_filename) %>.key;
  <% end %>

  server_name <%= fetch(:force_www_url).sub("www.", "") %>;

  return 301 $scheme://<%= fetch(:force_www_url) %>$request_uri;
}
<%end %>

<% if fetch(:ssl_certificate_filename) || (fetch(:ssl_certificate_path) && fetch(:ssl_key_path)) %>
server {
  listen      80;
  server_name <%= fetch(:server_name) %>;
  return 301 https://$host$request_uri;
}
<% end %>

<% if fetch(:redirect_urls) %>
  <% fetch(:redirect_urls).each do |url| %>
    server {
      listen 80;
      <% if fetch(:ssl_certificate_path) && fetch(:ssl_key_path) %>
      listen               443 ssl;
      ssl_certificate      <%= fetch(:ssl_certificate_path) %>;
      ssl_certificate_key  <%= fetch(:ssl_key_path) %>;
      <% elsif fetch(:ssl_certificate_filename) %>
      listen               443 ssl;
      ssl_certificate      /etc/ssl/certs/<%= fetch(:ssl_certificate_filename) %>.pem;
      ssl_certificate_key  /etc/ssl/private/<%= fetch(:ssl_certificate_filename) %>.key;
      <% end %>

      server_name <%= url %>;

      <% if fetch(:force_www_url) %>
        return 301 $scheme://<%= fetch(:force_www_url) %>$request_uri;
      <% else %>
        return 301 $scheme://<%= fetch(:server_name) %>$request_uri;
      <% end %>
    }
  <% end %>
<%end %>

server {
  <% if fetch(:ssl_certificate_path) && fetch(:ssl_key_path) %>
  listen               443 ssl;
  ssl_certificate      <%= fetch(:ssl_certificate_path) %>;
  ssl_certificate_key  <%= fetch(:ssl_key_path) %>;
  <% elsif fetch(:ssl_certificate_filename) %>
  listen               443 ssl;
  ssl_certificate      /etc/ssl/certs/<%= fetch(:ssl_certificate_filename) %>.pem;
  ssl_certificate_key  /etc/ssl/private/<%= fetch(:ssl_certificate_filename) %>.key;
  <% else %>
  listen               80;
  <% end %>

  server_name       <%= fetch(:server_name) %>;

  root              <%= current_path %>/public;

  try_files $uri/index.html $uri @puma;

  location @puma {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_redirect   off;

    <% if fetch(:geo_enabled) %>
    proxy_set_header GEOIP_COUNTRY_CODE $geoip_country_code;
    proxy_set_header GEOIP_COUNTRY_CODE3 $geoip_country_code3;
    proxy_set_header GEOIP_COUNTRY_NAME $geoip_country_name;
    proxy_set_header GEOIP_CITY_COUNTRY_CODE $geoip_city_country_code;
    proxy_set_header GEOIP_CITY_COUNTRY_CODE3 $geoip_city_country_code3;
    proxy_set_header GEOIP_CITY_COUNTRY_NAME $geoip_city_country_name;
    proxy_set_header GEOIP_REGION $geoip_region;
    proxy_set_header GEOIP_CITY $geoip_city;
    proxy_set_header GEOIP_POSTAL_CODE $geoip_postal_code;
    proxy_set_header GEOIP_CITY_CONTINENT_CODE $geoip_city_continent_code;
    proxy_set_header GEOIP_LATITUDE $geoip_latitude;
    proxy_set_header GEOIP_LONGITUDE $geoip_longitude;
    <% end %>

    proxy_pass http://puma;
  }

  location ~ ^/(assets)/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
    add_header Access-Control-Allow-Origin *;
  }

  error_page              500 502 503 504 /500.html;
  client_max_body_size    4G;
  keepalive_timeout       10;
}
